// <auto-generated />
using System;
using EFCore_QueryPractice.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCore_QueryPractice.Migrations
{
    [DbContext(typeof(ApContext))]
    partial class ApContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EFCore_QueryPractice.Models.ContactUpdate", b =>
                {
                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VendorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VendorId"));

                    b.ToTable("ContactUpdates");
                });

            modelBuilder.Entity("EFCore_QueryPractice.Models.Glaccount", b =>
                {
                    b.Property<int>("AccountNo")
                        .HasColumnType("int");

                    b.Property<string>("AccountDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("AccountNo");

                    b.ToTable("GLAccounts", (string)null);
                });

            modelBuilder.Entity("EFCore_QueryPractice.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InvoiceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<decimal>("CreditTotal")
                        .HasColumnType("money");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("InvoiceDueDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("InvoiceTotal")
                        .HasColumnType("money");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("smalldatetime");

                    b.Property<decimal>("PaymentTotal")
                        .HasColumnType("money");

                    b.Property<int>("TermsId")
                        .HasColumnType("int")
                        .HasColumnName("TermsID");

                    b.Property<int>("VendorId")
                        .HasColumnType("int")
                        .HasColumnName("VendorID");

                    b.HasKey("InvoiceId");

                    b.HasIndex(new[] { "InvoiceDate" }, "IX_InvoiceDate")
                        .IsDescending();

                    b.HasIndex(new[] { "TermsId" }, "IX_Invoices_TermsID");

                    b.HasIndex(new[] { "VendorId" }, "IX_Invoices_VendorID");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("EFCore_QueryPractice.Models.InvoiceArchive", b =>
                {
                    b.Property<decimal>("CreditTotal")
                        .HasColumnType("money");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("InvoiceDueDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("InvoiceID");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("InvoiceTotal")
                        .HasColumnType("money");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("smalldatetime");

                    b.Property<decimal>("PaymentTotal")
                        .HasColumnType("money");

                    b.Property<int>("TermsId")
                        .HasColumnType("int")
                        .HasColumnName("TermsID");

                    b.Property<int>("VendorId")
                        .HasColumnType("int")
                        .HasColumnName("VendorID");

                    b.ToTable("InvoiceArchive", (string)null);
                });

            modelBuilder.Entity("EFCore_QueryPractice.Models.InvoiceLineItem", b =>
                {
                    b.Property<int>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("InvoiceID");

                    b.Property<short>("InvoiceSequence")
                        .HasColumnType("smallint");

                    b.Property<int>("AccountNo")
                        .HasColumnType("int");

                    b.Property<decimal>("InvoiceLineItemAmount")
                        .HasColumnType("money");

                    b.Property<string>("InvoiceLineItemDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("InvoiceId", "InvoiceSequence");

                    b.HasIndex(new[] { "AccountNo" }, "IX_InvoiceLineItems_AccountNo");

                    b.ToTable("InvoiceLineItems");
                });

            modelBuilder.Entity("EFCore_QueryPractice.Models.Term", b =>
                {
                    b.Property<int>("TermsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TermsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TermsId"));

                    b.Property<string>("TermsDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<short>("TermsDueDays")
                        .HasColumnType("smallint");

                    b.HasKey("TermsId");

                    b.ToTable("Terms");
                });

            modelBuilder.Entity("EFCore_QueryPractice.Models.Vendor", b =>
                {
                    b.Property<int>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VendorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VendorId"));

                    b.Property<int>("DefaultAccountNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(570);

                    b.Property<int>("DefaultTermsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(3)
                        .HasColumnName("DefaultTermsID");

                    b.Property<string>("VendorAddress1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VendorAddress2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VendorCity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VendorContactFname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("VendorContactFName");

                    b.Property<string>("VendorContactLname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("VendorContactLName");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VendorPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VendorState")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("VendorZipCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("VendorId");

                    b.HasIndex(new[] { "VendorName" }, "IX_VendorName");

                    b.HasIndex(new[] { "DefaultAccountNo" }, "IX_Vendors_AccountNo");

                    b.HasIndex(new[] { "DefaultTermsId" }, "IX_Vendors_TermsID");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("EFCore_QueryPractice.Models.Invoice", b =>
                {
                    b.HasOne("EFCore_QueryPractice.Models.Term", "Terms")
                        .WithMany("Invoices")
                        .HasForeignKey("TermsId")
                        .IsRequired()
                        .HasConstraintName("FK_Invoices_Terms");

                    b.HasOne("EFCore_QueryPractice.Models.Vendor", "Vendor")
                        .WithMany("Invoices")
                        .HasForeignKey("VendorId")
                        .IsRequired()
                        .HasConstraintName("FK_Invoices_Vendors");

                    b.Navigation("Terms");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("EFCore_QueryPractice.Models.InvoiceLineItem", b =>
                {
                    b.HasOne("EFCore_QueryPractice.Models.Glaccount", "AccountNoNavigation")
                        .WithMany("InvoiceLineItems")
                        .HasForeignKey("AccountNo")
                        .IsRequired()
                        .HasConstraintName("FK_InvoiceLineItems_GLAccounts");

                    b.HasOne("EFCore_QueryPractice.Models.Invoice", "Invoice")
                        .WithMany("InvoiceLineItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_InvoiceLineItems_Invoices");

                    b.Navigation("AccountNoNavigation");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("EFCore_QueryPractice.Models.Vendor", b =>
                {
                    b.HasOne("EFCore_QueryPractice.Models.Glaccount", "DefaultAccountNoNavigation")
                        .WithMany("Vendors")
                        .HasForeignKey("DefaultAccountNo")
                        .IsRequired()
                        .HasConstraintName("FK_Vendors_GLAccounts");

                    b.HasOne("EFCore_QueryPractice.Models.Term", "DefaultTerms")
                        .WithMany("Vendors")
                        .HasForeignKey("DefaultTermsId")
                        .IsRequired()
                        .HasConstraintName("FK_Vendors_Terms");

                    b.Navigation("DefaultAccountNoNavigation");

                    b.Navigation("DefaultTerms");
                });

            modelBuilder.Entity("EFCore_QueryPractice.Models.Glaccount", b =>
                {
                    b.Navigation("InvoiceLineItems");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("EFCore_QueryPractice.Models.Invoice", b =>
                {
                    b.Navigation("InvoiceLineItems");
                });

            modelBuilder.Entity("EFCore_QueryPractice.Models.Term", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("EFCore_QueryPractice.Models.Vendor", b =>
                {
                    b.Navigation("Invoices");
                });
#pragma warning restore 612, 618
        }
    }
}
